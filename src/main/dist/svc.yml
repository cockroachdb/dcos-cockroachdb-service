name: {{FRAMEWORK_NAME}}
scheduler:
  principal: {{FRAMEWORK_PRINCIPAL}}
pods:
  cockroachdb:
    count: {{NODE_COUNT}}
    uris:
      - {{COCKROACH_URI}}
      - {{BOOTSTRAP_URI}}
    {{#ENABLE_VIRTUAL_NETWORK}}
    networks:
      dcos:
    {{/ENABLE_VIRTUAL_NETWORK}}
    placement: {{NODE_PLACEMENT}}
    resource-sets:
      server-resources:
        cpus: {{NODE_CPUS}}
        memory: {{NODE_MEM}}
        ports:
          http:
            port: {{CONTAINER_HTTP_PORT}}
            vip:
              prefix: http
              port: {{COCKROACH_HTTP_PORT}}
          pg:
            port: {{CONTAINER_PG_PORT}}
            vip:
              prefix: pg
              port: {{COCKROACH_PG_PORT}}
        volume:
          path: "cockroach-data"
          type: {{NODE_DISK_TYPE}}
          size: {{NODE_DISK}}
    tasks:
      node-init:
        goal: RUNNING
        resource-set: server-resources
        configs:
          start:
            template: "{{CONFIG_TEMPLATE_PATH}}/start.sh.mustache"
            dest: "start.sh"
          join:
            template: "{{CONFIG_TEMPLATE_PATH}}/join.sh.mustache"
            dest: "join.sh"
        cmd: "./bootstrap && \
              chmod +x $MESOS_SANDBOX/start.sh && \
              ln -s $MESOS_SANDBOX/{{COCKROACH_DIR}}/cockroach cockroach && \
              $MESOS_SANDBOX/start.sh"
        readiness-check:
          cmd: "curl -sf localhost:$PORT_HTTP/_admin/v1/health >/dev/null 2>/dev/null"
          interval: 10
          delay: 5
          timeout: 300
        health-check:
          cmd: "curl -sf localhost:$PORT_HTTP/_admin/v1/health >/dev/null 2>/dev/null"
          interval: 120
          grace-period: 30
          max-consecutive-failures: 3
          timeout: 10
          delay: 0
        env:
          COCKROACH_DIR: {{COCKROACH_DIR}}
          COCKROACH_CACHE_SIZE: {{COCKROACH_CACHE_SIZE}}
          COCKROACH_MAX_SQL_MEMORY: {{COCKROACH_MAX_SQL_MEMORY}}
          COCKROACH_CHANNEL: mesosphere-dcos
      node-join:
        goal: RUNNING
        resource-set: server-resources
        configs:
          join:
            template: "{{CONFIG_TEMPLATE_PATH}}/join.sh.mustache"
            dest: "join.sh"
        cmd: "./bootstrap && \
              chmod +x $MESOS_SANDBOX/join.sh && \
              ln -s $MESOS_SANDBOX/{{COCKROACH_DIR}}/cockroach cockroach && \
              $MESOS_SANDBOX/join.sh"
        readiness-check:
          cmd: "curl -sf localhost:$PORT_HTTP/_admin/v1/health >/dev/null 2>/dev/null"
          interval: 10
          delay: 5
          timeout: 300
        health-check:
          cmd: "curl -sf localhost:$PORT_HTTP/_admin/v1/health >/dev/null 2>/dev/null"
          interval: 120
          grace-period: 30
          max-consecutive-failures: 3
          timeout: 10
          delay: 0
        env:
          COCKROACH_DIR: {{COCKROACH_DIR}}
          COCKROACH_CACHE_SIZE: {{COCKROACH_CACHE_SIZE}}
          COCKROACH_MAX_SQL_MEMORY: {{COCKROACH_MAX_SQL_MEMORY}}
          COCKROACH_CHANNEL: mesosphere-dcos
  admin:
    count: {{SIDE_COUNT}}
    uris:
      - {{COCKROACH_URI}}
      - {{BOOTSTRAP_URI}}
    resource-sets:
      admin-resources:
        cpus: {{SIDE_CPUS}}
        memory: {{SIDE_MEM}}
        volume:
          path: "cockroach-backup"
          type: {{SIDE_DISK_TYPE}}
          size: {{SIDE_DISK}}
    tasks:
      backup:
        goal: FINISHED
        configs:
          aws:
            template: "{{CONFIG_TEMPLATE_PATH}}/aws.sh.mustache"
            dest: "aws.sh"
        cmd: "./bootstrap --resolve=false && \
              chmod +x $MESOS_SANDBOX/aws.sh && \
              mkdir backup && \
              touch backup/$DATABASE_NAME.sql && \
              $MESOS_SANDBOX/{{COCKROACH_DIR}}/cockroach dump $DATABASE_NAME --insecure \
              --host='pg.cockroachdb.l4lb.thisdcos.directory' > \
              backup/$DATABASE_NAME.sql && \
              $MESOS_SANDBOX/aws.sh s3 cp \
              backup/$DATABASE_NAME.sql \
              s3://$S3_BUCKET_NAME/$S3_DIR_PATH/$BACKUP_DIR/"
        resource-set: admin-resources
      restore:
        goal: FINISHED
        configs:
          aws:
            template: "{{CONFIG_TEMPLATE_PATH}}/aws.sh.mustache"
            dest: "aws.sh"
        cmd: "./bootstrap --resolve=false && \
             chmod +x $MESOS_SANDBOX/aws.sh && \
             mkdir restore && \
             $MESOS_SANDBOX/aws.sh s3 cp \
             s3://$S3_BUCKET_NAME/$S3_DIR_PATH/$BACKUP_DIR/$DATABASE_NAME.sql \
             restore/ && \
             $MESOS_SANDBOX/{{COCKROACH_DIR}}/cockroach sql --insecure \
             --execute=\"CREATE DATABASE IF NOT EXISTS $DATABASE_NAME\" \
             --host='pg.cockroachdb.l4lb.thisdcos.directory' && \
             $MESOS_SANDBOX/{{COCKROACH_DIR}}/cockroach sql \
             --database=$DATABASE_NAME --insecure \
             --host='pg.cockroachdb.l4lb.thisdcos.directory' < \
             restore/$DATABASE_NAME.sql"
        resource-set: admin-resources
  metrics:
    count: 1
    resource-sets:
      metrics-resources:
        cpus: {{SIDE_CPUS}}
        memory: {{SIDE_MEM}}
    tasks:
      server:
        goal: RUNNING
        cmd: "docker run \
              -e FRAMEWORK_NAME={{FRAMEWORK_NAME}} \
              -e PORT_HTTP={{COCKROACH_HTTP_PORT}} \
              -e STATSD_UDP_HOST=$STATSD_UDP_HOST \
              -e STATSD_UDP_PORT=$STATSD_UDP_PORT \
              -e PYTHONUNBUFFERED=1 \
              --network='host' \
              sammisthemannis/cockroach-statsd:v1"
        resource-set: metrics-resources
plans:
  deploy:
    strategy: parallel
    phases:
      node-deploy:
        strategy: parallel
        pod: cockroachdb
        steps:
          - 0: [[node-init]]
          - default: [[node-join]]
      metrics-deploy:
        strategy: parallel
        pod: metrics
        steps:
          - default: [[server]]
  replace:
    strategy: parallel
    phases:
      node-deploy:
        strategy: parallel
        pod: cockroachdb
        steps:
          - 0: [[node-init]]
          - default: [[node-join]]
  backup:
    strategy: serial
    phases:
      backup:
        strategy: serial
        pod: admin
        steps:
          - default: [[backup]]
  restore:
    strategy: serial
    phases:
      restore:
        strategy: serial
        pod: admin
        steps:
          - default: [[restore]]
  update:
    strategy: serial
    phases:
      node-deploy:
        strategy: serial
        pod: cockroachdb
        steps:
          - 0: [[node-init]]
          - default: [[node-join]]
      metrics-deploy:
        strategy: serial
        pod: metrics
        steps:
          - default: [[server]]
